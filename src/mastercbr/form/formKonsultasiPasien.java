/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mastercbr.form;

import java.awt.EventQueue;
import java.beans.Beans;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.RollbackException;
import javax.swing.DefaultCellEditor;
import javax.swing.JFrame;
import javax.swing.JPanel;
import static mastercbr.form.cbrMethod.sorensonCoefficient;
import mastercbr.table.Gejala;
import mastercbr.table.Kasus;
import mastercbr.table.Pasien;
import mastercbr.table.RekamMedis;

/**
 *
 * @author SEED
 */
public class formKonsultasiPasien extends JPanel {
    
    public formKonsultasiPasien() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("MasterCBRPU").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT p FROM Pasien p");
        query1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT g FROM Gejala g");
        query2 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT k FROM Kasus k");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        list1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query1.getResultList());
        jComboBox2 = new javax.swing.JComboBox<>();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jDialog3 = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        jDateChooser3 = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jDateChooser4 = new com.toedter.calendar.JDateChooser();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jDialog4 = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        list4 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query1.getResultList());
        list5 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query2.getResultList());
        newButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        newButton1 = new javax.swing.JButton();
        newButton3 = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        newDetailButton = new javax.swing.JButton();
        deleteDetailButton = new javax.swing.JButton();
        detailScrollPane = new javax.swing.JScrollPane();
        detailTable = new javax.swing.JTable();

        FormListener formListener = new FormListener();

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LAKI-LAKI", "PEREMPUAN" }));

        jDialog1.setTitle("INPUT DATA PASIEN");
        jDialog1.setSize(800, 600);
        jDialog1.getContentPane().setLayout(new java.awt.GridLayout(0, 2));

        jLabel1.setText("ID PASIEN");
        jDialog1.getContentPane().add(jLabel1);

        jTextField1.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.idPasien}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jTextField1);

        jLabel2.setText("NAMA PASIEN");
        jDialog1.getContentPane().add(jLabel2);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.nama}"), jTextField2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jTextField2);

        jLabel3.setText("JENIS KELAMIN");
        jDialog1.getContentPane().add(jLabel3);

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LAKI-LAKI", "PEREMPUAN" }));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.jenisKelaminString}"), jComboBox3, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jComboBox3);

        jLabel4.setText("UMUR");
        jDialog1.getContentPane().add(jLabel4);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.umur}"), jTextField4, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jTextField4);

        jLabel5.setText("TEMPAT LAHIR");
        jDialog1.getContentPane().add(jLabel5);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.tempatLahir}"), jTextField5, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jTextField5);

        jLabel6.setText("TANGGAL LAHIR");
        jDialog1.getContentPane().add(jLabel6);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.tanggalLahir}"), jDateChooser1, org.jdesktop.beansbinding.BeanProperty.create("date"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jDateChooser1);

        jLabel7.setText("ALAMAT");
        jDialog1.getContentPane().add(jLabel7);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.alamat}"), jTextField7, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jDialog1.getContentPane().add(jTextField7);

        jButton1.setText("SIMPAN");
        jButton1.addActionListener(formListener);
        jDialog1.getContentPane().add(jButton1);

        jButton2.setText("BATAL");
        jButton2.addActionListener(formListener);
        jDialog1.getContentPane().add(jButton2);

        jDialog2.setTitle("INPUT DATA PASIEN");
        jDialog2.setSize(800, 600);
        jDialog2.getContentPane().setLayout(new java.awt.GridLayout(0, 2));

        jLabel9.setText("PASIEN");
        jDialog2.getContentPane().add(jLabel9);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, jComboBox1);
        bindingGroup.addBinding(jComboBoxBinding);

        jDialog2.getContentPane().add(jComboBox1);

        jLabel13.setText("TANGGAL KONSULTASI");
        jDialog2.getContentPane().add(jLabel13);

        jDateChooser2.setDate(new Date()
        );
        jDialog2.getContentPane().add(jDateChooser2);

        jButton3.setText("SIMPAN");
        jButton3.addActionListener(formListener);
        jDialog2.getContentPane().add(jButton3);

        jButton4.setText("BATAL");
        jButton4.addActionListener(formListener);
        jDialog2.getContentPane().add(jButton4);

        jDialog3.setTitle("FORM INPUT DIAGNOSA");
        jDialog3.setSize(800, 600);
        jDialog3.getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        jPanel3.setLayout(new java.awt.GridLayout(0, 2));

        jLabel10.setText("PASIEN");
        jPanel3.add(jLabel10);

        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, jComboBox4);
        bindingGroup.addBinding(jComboBoxBinding);

        jPanel3.add(jComboBox4);

        jLabel14.setText("TANGGAL KONSULTASI");
        jPanel3.add(jLabel14);

        jDateChooser3.setDate(new Date()
        );
        jPanel3.add(jDateChooser3);

        jLabel8.setText("NAMA");
        jPanel3.add(jLabel8);

        jTextField3.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.nama}"), jTextField3, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jTextField3);

        jLabel11.setText("JENIS KELAMIN");
        jPanel3.add(jLabel11);

        jTextField6.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.jenisKelaminString}"), jTextField6, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jTextField6);

        jLabel12.setText("UMUR");
        jPanel3.add(jLabel12);

        jTextField8.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.umur}"), jTextField8, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jTextField8);

        jLabel15.setText("TEMPAT LAHIR");
        jPanel3.add(jLabel15);

        jTextField9.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.tempatLahir}"), jTextField9, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jTextField9);

        jLabel16.setText("ALAMAT");
        jPanel3.add(jLabel16);

        jTextField10.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.alamat}"), jTextField10, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jTextField10);

        jLabel17.setText("TANGGAL LAHIR");
        jPanel3.add(jLabel17);

        jDateChooser4.setEnabled(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jComboBox4, org.jdesktop.beansbinding.ELProperty.create("${selectedItem.tanggalLahir}"), jDateChooser4, org.jdesktop.beansbinding.BeanProperty.create("date"));
        bindingGroup.addBinding(binding);

        jPanel3.add(jDateChooser4);

        jDialog3.getContentPane().add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list1, jTable1);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idGejala}"));
        columnBinding.setColumnName("Id Gejala");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${namaGejala}"));
        columnBinding.setColumnName("Nama Gejala");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${pilihan}"));
        columnBinding.setColumnName("Pilihan");
        columnBinding.setColumnClass(Boolean.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${keterangan}"));
        columnBinding.setColumnName("Keterangan");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();

        jScrollPane1.setViewportView(jTable1);

        jPanel4.add(jScrollPane1);

        jDialog3.getContentPane().add(jPanel4);

        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jButton5.setText("PROSES DIAGNOSA");
        jButton5.addActionListener(formListener);
        jPanel5.add(jButton5);

        jButton6.setText("BATAL");
        jButton6.addActionListener(formListener);
        jPanel5.add(jButton6);

        jDialog3.getContentPane().add(jPanel5);

        jDialog4.setTitle("FORM HASIL DIAGNOSA");
        jDialog4.setSize(800, 600);

        jPanel6.setLayout(new java.awt.GridLayout());

        jButton7.setText("SIMPAN");
        jButton7.addActionListener(formListener);
        jPanel6.add(jButton7);

        jButton8.setText("TUTUP");
        jButton8.addActionListener(formListener);
        jPanel6.add(jButton8);

        jDialog4.getContentPane().add(jPanel6, java.awt.BorderLayout.PAGE_START);

        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("GEJALA YANG DIMASUKAN"));

        jTable2.setAutoCreateRowSorter(true);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list4, jTable2);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idGejala}"));
        columnBinding.setColumnName("Id Gejala");
        columnBinding.setColumnClass(Long.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${keterangan}"));
        columnBinding.setColumnName("Keterangan");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${namaGejala}"));
        columnBinding.setColumnName("Nama Gejala");
        columnBinding.setColumnClass(String.class);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane2.setViewportView(jTable2);

        jPanel7.add(jScrollPane2);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("DIAGNOSA PENYAKIT"));

        jTable3.setAutoCreateRowSorter(true);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list5, jTable3);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idKasus}"));
        columnBinding.setColumnName("Id Kasus");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${penyakitIdPenyakit.namaPenyakit}"));
        columnBinding.setColumnName("Nama Penyakit");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${similiarity}"));
        columnBinding.setColumnName("Similiarity");
        columnBinding.setColumnClass(Double.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${gejalaList}"));
        columnBinding.setColumnName("Gejala List");
        columnBinding.setColumnClass(java.util.List.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane3.setViewportView(jTable3);

        jPanel7.add(jScrollPane3);

        jDialog4.getContentPane().add(jPanel7, java.awt.BorderLayout.CENTER);

        newButton2.setText("INPUT REKAM MEDIS");
        newButton2.addActionListener(formListener);

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        newButton1.setText("INPUT PASIEN");
        newButton1.addActionListener(formListener);
        jPanel1.add(newButton1);

        newButton3.setText("INPUT DIAGNOSA PASIEN");
        newButton3.addActionListener(formListener);
        jPanel1.add(newButton3);

        newButton.setText("PASIEN BARU");
        newButton.addActionListener(formListener);
        jPanel1.add(newButton);

        deleteButton.setText("HAPUS PASIEN");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);
        jPanel1.add(deleteButton);

        saveButton.setText("SIMPAN");
        saveButton.addActionListener(formListener);
        jPanel1.add(saveButton);

        refreshButton.setText("REFRESH");
        refreshButton.addActionListener(formListener);
        jPanel1.add(refreshButton);

        add(jPanel1);

        masterTable.setAutoCreateRowSorter(true);
        masterTable.setRowHeight(30);

        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${idPasien}"));
        columnBinding.setColumnName("Id Pasien");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${nama}"));
        columnBinding.setColumnName("Nama");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${alamat}"));
        columnBinding.setColumnName("Alamat");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${jenisKelaminString}"));
        columnBinding.setColumnName("Jenis Kelamin");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tempatLahir}"));
        columnBinding.setColumnName("Tempat Lahir");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tanggalLahir}"));
        columnBinding.setColumnName("Tanggal Lahir");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${keterangan}"));
        columnBinding.setColumnName("Keterangan");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kelompokUmur}"));
        columnBinding.setColumnName("Kelompok Umur");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${umur}"));
        columnBinding.setColumnName("Umur");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);
        masterTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(this.jComboBox2));

        add(masterScrollPane);

        newDetailButton.setText("REKAM MEDIS BARU");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), newDetailButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        newDetailButton.addActionListener(formListener);
        jPanel2.add(newDetailButton);

        deleteDetailButton.setText("HAPUS REKAM MEDIS");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, detailTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteDetailButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteDetailButton.addActionListener(formListener);
        jPanel2.add(deleteDetailButton);

        add(jPanel2);

        masterTable.setDefaultEditor(String.class, new myutils.gui.TablePopupEditor());
        masterTable.setDefaultEditor(java.util.Date.class, new com.toedter.calendar.JDateChooserCellEditor());
        detailTable.setDefaultEditor(java.util.Date.class, new com.toedter.calendar.JDateChooserCellEditor());
        //detailTable.setDefaultEditor(Kasus.class, new DefaultCellEditor(this.jComboBox1));
        detailTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        //masterTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        detailTable.setRowHeight(30);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${selectedElement.rekamMedisCollection}");
        jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, eLProperty, detailTable);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${rmId}"));
        columnBinding.setColumnName("Rm Id");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${tanggalKonsultasi}"));
        columnBinding.setColumnName("Tanggal Konsultasi");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kasus}"));
        columnBinding.setColumnName("Kasus");
        columnBinding.setColumnClass(mastercbr.table.Kasus.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kasus.penyakitIdPenyakit.idPenyakit}"));
        columnBinding.setColumnName("Penyakit ID");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kasus.penyakitIdPenyakit.namaPenyakit}"));
        columnBinding.setColumnName("Penyakit");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${kasus.penyakitIdPenyakit.solusi}"));
        columnBinding.setColumnName("Solusi");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        jTableBinding.setSourceUnreadableValue(java.util.Collections.emptyList());
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        detailScrollPane.setViewportView(detailTable);

        add(detailScrollPane);

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == newButton1) {
                formKonsultasiPasien.this.newButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == newButton3) {
                formKonsultasiPasien.this.newButton3ActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                formKonsultasiPasien.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                formKonsultasiPasien.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                formKonsultasiPasien.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                formKonsultasiPasien.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newDetailButton) {
                formKonsultasiPasien.this.newDetailButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteDetailButton) {
                formKonsultasiPasien.this.deleteDetailButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jButton1) {
                formKonsultasiPasien.this.jButton1ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton2) {
                formKonsultasiPasien.this.jButton2ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton3) {
                formKonsultasiPasien.this.jButton3ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton4) {
                formKonsultasiPasien.this.jButton4ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton5) {
                formKonsultasiPasien.this.jButton5ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton6) {
                formKonsultasiPasien.this.jButton6ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton7) {
                formKonsultasiPasien.this.jButton7ActionPerformed(evt);
            }
            else if (evt.getSource() == jButton8) {
                formKonsultasiPasien.this.jButton8ActionPerformed(evt);
            }
            else if (evt.getSource() == newButton2) {
                formKonsultasiPasien.this.newButton2ActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    
    private void deleteDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDetailButtonActionPerformed
        int index = masterTable.getSelectedRow();
        mastercbr.table.Pasien p = list.get(masterTable.convertRowIndexToModel(index));
        Collection<mastercbr.table.RekamMedis> rs = p.getRekamMedisCollection();
        int[] selected = detailTable.getSelectedRows();
        List<mastercbr.table.RekamMedis> toRemove = new ArrayList<mastercbr.table.RekamMedis>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            selected[idx] = detailTable.convertRowIndexToModel(selected[idx]);
            int count = 0;
            Iterator<mastercbr.table.RekamMedis> iter = rs.iterator();
            while (count++ < selected[idx]) {
                iter.next();
            }
            mastercbr.table.RekamMedis r = iter.next();
            toRemove.add(r);
            entityManager.remove(r);
        }
        rs.removeAll(toRemove);
        masterTable.clearSelection();
        masterTable.setRowSelectionInterval(index, index);
    }//GEN-LAST:event_deleteDetailButtonActionPerformed

    private void newDetailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDetailButtonActionPerformed
        int index = masterTable.getSelectedRow();
        mastercbr.table.Pasien p = list.get(masterTable.convertRowIndexToModel(index));
        Collection<mastercbr.table.RekamMedis> rs = p.getRekamMedisCollection();
        if (rs == null) {
            rs = new LinkedList<mastercbr.table.RekamMedis>();
            p.setRekamMedisCollection((List) rs);
        }
        mastercbr.table.RekamMedis r = new mastercbr.table.RekamMedis();
        Kasus kasus = r.getKasus();
        kasus.setRekamMedis(r);
        entityManager.persist(r);
        r.setPasienIdPasien(p);
        rs.add(r);
        masterTable.clearSelection();
        masterTable.setRowSelectionInterval(index, index);
        int row = rs.size() - 1;
        detailTable.setRowSelectionInterval(row, row);
        detailTable.scrollRectToVisible(detailTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newDetailButtonActionPerformed
    
    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        detailTable.clearSelection();
        masterTable.clearSelection();
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        data.forEach((entity) -> {
            entityManager.refresh(entity);
        });
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] selected = masterTable.getSelectedRows();
        List<mastercbr.table.Pasien> toRemove = new ArrayList<mastercbr.table.Pasien>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            mastercbr.table.Pasien p = list.get(masterTable.convertRowIndexToModel(selected[idx]));
            toRemove.add(p);
            entityManager.remove(p);
        }
        list.removeAll(toRemove);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        mastercbr.table.Pasien p = new mastercbr.table.Pasien();
        entityManager.persist(p);
        list.add(p);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<mastercbr.table.Pasien> merged = new ArrayList<mastercbr.table.Pasien>(list.size());
            for (mastercbr.table.Pasien p : list) {
                merged.add(entityManager.merge(p));
            }
            list.clear();
            list.addAll(merged);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    public void inputDataPasien()
    {
        newButton1ActionPerformed(null);
    }
    public void inputDataKonsulPasien()
    {
        newButton2ActionPerformed(null);
    }
    
    private void newButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButton1ActionPerformed
        mastercbr.table.Pasien p = new mastercbr.table.Pasien();
        entityManager.persist(p);
        list.add(p);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
        jDialog1.show();

        // TODO add your handling code here:
    }//GEN-LAST:event_newButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jDialog1.hide();
        refreshButtonActionPerformed(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        saveButtonActionPerformed(evt);
        jDialog1.hide();
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void newButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButton2ActionPerformed
//        int index = masterTable.getSelectedRow();
//        mastercbr.table.Pasien p = list.get(masterTable.convertRowIndexToModel(index));
//        Collection<mastercbr.table.RekamMedis> rs = p.getRekamMedisCollection();
//        if (rs == null) {
//            rs = new LinkedList<mastercbr.table.RekamMedis>();
//            p.setRekamMedisCollection((List) rs);
//        }
//        mastercbr.table.RekamMedis r = new mastercbr.table.RekamMedis();
//        Kasus kasus = r.getKasus();
//        kasus.setRekamMedis(r);
//        entityManager.persist(r);
//        r.setPasienIdPasien(p);
//        rs.add(r);
//        masterTable.clearSelection();
//        masterTable.setRowSelectionInterval(index, index);
//        int row = rs.size() - 1;
//        detailTable.setRowSelectionInterval(row, row);
//        detailTable.scrollRectToVisible(detailTable.getCellRect(row, 0, true));
        
        jDialog2.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_newButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        mastercbr.table.Pasien p = (mastercbr.table.Pasien) jComboBox1.getSelectedItem();
        Collection<mastercbr.table.RekamMedis> rs = p.getRekamMedisCollection();
        if (rs == null) {
            rs = new LinkedList<mastercbr.table.RekamMedis>();
            p.setRekamMedisCollection((List) rs);
        }
        mastercbr.table.RekamMedis r = new mastercbr.table.RekamMedis();
        Kasus kasus = r.getKasus();
        kasus.setRekamMedis(r);
        r.setTanggalKonsultasi(jDateChooser2.getDate());
        entityManager.persist(r);
        r.setPasienIdPasien(p);
        rs.add(r);
//        masterTable.clearSelection();
//        masterTable.setRowSelectionInterval(index, index);
//        int row = rs.size() - 1;
//        detailTable.setRowSelectionInterval(row, row);
//        detailTable.scrollRectToVisible(detailTable.getCellRect(row, 0, true));

        saveButtonActionPerformed(evt);
        jDialog2.hide();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        refreshButtonActionPerformed(evt);
        jDialog2.hide();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void newButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButton3ActionPerformed
        List<Gejala> resultList = query1.getResultList();
        resultList.forEach((Gejala object) -> {
            entityManager.refresh(object);
            object.setPilihan(false);
        });
        list1.clear();
        list1.addAll(resultList);
        jDialog3.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_newButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed


//        saveButtonActionPerformed(evt);
        jDialog3.hide();
        list1.removeIf(a->!a.isPilihan());
        System.out.println("list1 = " + list1.size());
        List<Long> listKeyGejala = new LinkedList<>();
        list1.forEach((gejala) -> {
            listKeyGejala.add(gejala.getIdGejala());
        }); 
        System.out.println("listKeyGejala = " + listKeyGejala);
        int selectedRow = masterTable.getSelectedRow();
        Kasus p = new Kasus();
        System.out.println("p = " + p);
        p.setGejalaList(listKeyGejala);
        

        list4.clear();
        listKeyGejala.stream().map((long1) -> 
            entityManager.find(Gejala.class, long1)).forEachOrdered((find) -> {
            list4.add(find);
        });

        list5.clear();
        list5.addAll(knn(p, query2.getResultList()));
        list5.remove(p);
        
        jDialog4.show();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        refreshButtonActionPerformed(evt);
        jDialog3.hide();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Kasus k = new Kasus();
        List<Long> gejalaList = new LinkedList<>();
        for (Gejala gejala : list4) {
            gejalaList.add(gejala.getIdGejala());
        }
        k.setGejalaList(gejalaList);
        int selectedRowPenyakit = jTable3.getSelectedRow();
        Kasus pilihan = list5.get(jTable3.convertRowIndexToModel(selectedRowPenyakit));
        k.setPenyakitIdPenyakit(pilihan.getPenyakitIdPenyakit());
        k.setRevisi(true);
        
        Pasien pasien = (Pasien) jComboBox4.getSelectedItem();
        
        RekamMedis RM = new RekamMedis();
        RM.setPasienIdPasien(pasien);
        RM.setKasus(k);
        k.setRekamMedis(RM);
        
        
        entityManager.persist(k);
        saveButtonActionPerformed(evt);
        refreshButtonActionPerformed(evt);
        jDialog4.hide();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        jDialog4.hide();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteDetailButton;
    private javax.swing.JScrollPane detailScrollPane;
    private javax.swing.JTable detailTable;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private com.toedter.calendar.JDateChooser jDateChooser3;
    private com.toedter.calendar.JDateChooser jDateChooser4;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JDialog jDialog3;
    private javax.swing.JDialog jDialog4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private java.util.List<mastercbr.table.Pasien> list;
    private java.util.List<mastercbr.table.Gejala> list1;
    private java.util.List<mastercbr.table.Gejala> list4;
    private java.util.List<mastercbr.table.Kasus> list5;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.swing.JButton newButton1;
    private javax.swing.JButton newButton2;
    private javax.swing.JButton newButton3;
    private javax.swing.JButton newDetailButton;
    private javax.persistence.Query query;
    private javax.persistence.Query query1;
    private javax.persistence.Query query2;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formKonsultasiPasien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formKonsultasiPasien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formKonsultasiPasien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formKonsultasiPasien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new formKonsultasiPasien());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
    public List<Kasus> knn(Kasus Baru, List<Kasus> lama)
        {
            for (Kasus kasusLama : lama) {
                List<Long> gejalaList = Baru.getGejalaList();
                                
                double sim = 0d;
                double totalLama = 0d;
                                
                sim = gejalaList.stream().filter(
                        (l) -> (kasusLama.getGejalaList().contains(l))).map((l) -> entityManager.find(Gejala.class, l)).map((find) -> find.getValue()).reduce(sim, (accumulator, _item) -> accumulator + _item);                
                totalLama = gejalaList.stream().map(
                        (x) -> entityManager.find(Gejala.class, x)).map((find) -> find.getValue()).reduce(totalLama, (accumulator, _item) -> accumulator + _item);
                sim = sim / totalLama;
                BigDecimal t = new BigDecimal(sim);
                BigDecimal t1 = BigDecimal.ONE;
                
                if (t.equals(t1)) {
                    double bSize = Baru.getGejalaList().size();
                    System.out.println("bSize = " + bSize);
                    double lSize = kasusLama.getGejalaList().size();
                    System.out.println("lSize = " + lSize);
                    sim = bSize / lSize;
                    System.out.println("sim = " + sim);
                }

                kasusLama.setSimiliarity(sim);
            }
            return lama;
        }
    public List<Kasus> sorensonCoefficient(Kasus Baru, List<Kasus> lama)
        {
            EntityManager entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("MasterCBRPU").createEntityManager();        
            Query query1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT g FROM Gejala g");
            List<Gejala> resultList = query1.getResultList();
            int jumlahGejala = resultList.size();
            List<Long> gejalaListBaru = Baru.getGejalaList();
            for (Kasus kasusLama : lama) {
                int m11 = 0;
                int m10 = 0;
                int m01 = 0;
                int m00 = 0;
                List<Long> gejalaListLama = kasusLama.getGejalaList();
                for (Gejala gejala : resultList) {
                    Long idGejala = gejala.getIdGejala();
                    if (gejalaListBaru.contains(idGejala) && gejalaListLama.contains(idGejala)) {
                        m11++;
                    }
                    else if (gejalaListBaru.contains(idGejala))
                    {
                        m10++;
                    }
                    else if (gejalaListLama.contains(idGejala))
                    {
                        m01++;
                    }
                    else {
                        m00++;
                    }
                }                
                System.out.println("kasus = " + kasusLama);
                double y = m11;
                y = y * 2d;
                double x = m11 + m10 + m01; 
                x = x * 2d;
                double temp = y / x;
                System.out.println("temp = " + temp);
                kasusLama.setSimiliarity(temp);
            }            
            return lama;
        }    
    
}
